from snakemake.io import temp, directory, from_queue
from snakemake.utils import min_version


min_version("9.1.1")
print("Starting grz-watchdog", file=sys.stderr)


container: "docker://condaforge/miniforge3:24.11.3-2"


configfile: "config/config.yaml"


include: "rules/common.smk"


# include: "rules/storage.smk"


# INPUT_QUEUE.put("tmp/queue-workaround")
# # This is a workaround for a bug (snakemake immediately exits)
# # that occurs _sometimes_ when the queue is initially empty.
# rule queue_initially_empty_workaround:
#     output:
#         temp("tmp/queue-workaround"),
#     shell:
#         """
#         sleep 30s
#         echo "done" > {output}
#         """


rule all:
    input:
        item=from_queue(INPUT_QUEUE, finish_sentinel=SENTINEL),
        running="running",
    default_target: True


rule start:
    output:
        running=temp("running"),
    run:
        UPDATE_THREAD.start()
        print("true", file=open(output.running, "wt"))


rule download_submission:
    """
    Download a submission from S3 to the local filesystem.
    Could probably also be done with s3 storage plugin.
    """
    input:
        s3_config="config/buckets/{bucket_name}.config.yaml",
        db_config="config/db.config.yaml",
    output:
        data=temp(directory("results/{bucket_name}/downloaded/{submission_id}")),
    log:
        "logs/{bucket_name}/download_submission/{submission_id}.log",
    conda:
        "envs/grzctl.yaml"
    shell:
        """
        (
        grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} downloading
        grzctl download --submission-id {wildcards.submission_id} --output-dir {output.data} --config-file {input.s3_config}) || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
        grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} downloaded
        ) > {log} 2>&1
        """


rule decrypt_submission:
    """
    Decrypt the downloaded submission using grzctl.
    """
    input:
        data="results/{bucket_name}/downloaded/{submission_id}",
        s3_config="config/buckets/{bucket_name}.config.yaml",
        db_config="config/db.config.yaml",
    output:
        data=temp(directory("results/{bucket_name}/decrypted/{submission_id}")),
    log:
        "logs/{bucket_name}/decrypt_submission/{submission_id}.log",
    conda:
        "envs/grzctl.yaml"
    shell:
        """
        (
        grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} decrypting
        grzctl decrypt --config-file {input.s3_config} {input.data} || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
        grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} decrypted
        ) > {log} 2>&1
        """


rule extract_metadata:
    """
    Extract metadata from the decrypted submission for some subsequent steps.
    """
    input:
        data="results/{bucket_name}/decrypted/{submission_id}",
    output:
        metadata=temp("results/{bucket_name}/metadata/{submission_id}.json"),
    log:
        "logs/{bucket_name}/extract_metadata/{submission_id}.log",
    conda:
        "envs/grzctl.yaml"
    shell:
        """
        (cp '{input.data}/metadata/metadata.json' {output.metadata}) 2> {log}
        """


rule validate_metadata:
    """
    Validate the submission using grzctl.
    """
    input:
        data="results/{bucket_name}/decrypted/{submission_id}",
        db_config="config/db.config.yaml",
    output:
        validation_flag=temp("results/{bucket_name}/validation_flag/{submission_id}"),
        validation_errors=temp(
            "results/{bucket_name}/validation_errors/{submission_id}.txt"
        ),
    log:
        "logs/{bucket_name}/validate_metadata/{submission_id}.log",
    conda:
        "envs/grzctl.yaml"
    shell:
        """
        (
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} validating
            (grzctl validate --submission-dir {input.data} 2> {output.validation_errors}) || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
            if [ $? -eq 0 ]; then
                echo "true" > {output.validation_flag}
            else
                echo "false" > {output.validation_flag}
            fi
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} validated
        ) 2> {log}
        """


rule check_consent:
    """
    Check if the submission has consent using grzctl.
    """
    input:
        data="results/{bucket_name}/decrypted/{submission_id}",
    output:
        consent_flag=temp("results/{bucket_name}/consent_flag/{submission_id}"),
    log:
        "logs/{bucket_name}/check_consent/{submission_id}.log",
    conda:
        "envs/grzctl.yaml"
    shell:
        """
        (grzctl consent --submission-dir {input.data} > {output.consent_flag}) 2> {log}
        """


rule re_encrypt_submission:
    """
    Re-encrypt the submission using the target public key, depending on whether research consent was given.
    """
    input:
        data="results/{bucket_name}/decrypted/{submission_id}",
        pruefbericht="results/{bucket_name}/pruefbericht/{submission_id}",
        consent_flag="results/{bucket_name}/consent_flag/{submission_id}",
        config_consented=config["buckets"]["consented"],
        config_nonconsented=config["buckets"]["nonconsented"],
        db_config="config/db.config.yaml",
    output:
        data=temp(directory("results/{bucket_name}/re-encrypt/{submission_id}")),
    log:
        "logs/{bucket_name}/re_encrypt_submission/{submission_id}.log",
    conda:
        "envs/grzctl.yaml"
    shell:
        """
        (
            CONSENT=$(cat {input.consent_flag})
            if [[ "$CONSENT" == "true" ]]; then
                CONFIG_FILE="{input.config_consented}"
            else
                CONFIG_FILE="{input.config_nonconsented}"
            fi
            echo "Consent: $CONSENT. Using config file: $CONFIG_FILE"
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} encrypting
            grzctl encrypt --config-file "$CONFIG_FILE" --submission-dir {input.data} --output-dir {output.data} || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} encrypted
        ) > {log} 2>&1
        """


rule archive_submission:
    """
    Upload data to the target s3 bucket.
    """
    input:
        data="results/{bucket_name}/re-encrypt/{submission_id}",
        consent_flag="results/{bucket_name}/consent_flag/{submission_id}",
        config_consented=config["buckets"]["consented"],
        config_nonconsented=config["buckets"]["nonconsented"],
        db_config="config/db.config.yaml",
    output:
        archived=temp("results/{bucket_name}/archived/{submission_id}"),
    log:
        "logs/{bucket_name}/archive_submission/{submission_id}.log",
    shell:
        """
        (
            CONSENT=$(cat {input.consent_flag})
            if [[ "$CONSENT" == "true" ]]; then
                CONFIG_FILE="{input.config_consented}"
            else
                CONFIG_FILE="{input.config_nonconsented}"
            fi
            echo "Consent: $CONSENT. Using config file for archiving: $CONFIG_FILE"
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} archiving
            (grzctl archive --config-file "$CONFIG_FILE" TODO && echo 'done' > {output.archived}) || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} archived
        ) > {log} 2>&1
        """


rule generate_pruefbericht:
    """
    Generate a Prüfbericht for the submission.
    """
    input:
        validation_flag="results/{bucket_name}/validation_flag/{submission_id}",
        data="results/{bucket_name}/decrypted/{submission_id}",
    output:
        pruefbericht=temp("results/{bucket_name}/pruefbericht/{submission_id}"),
    log:
        "logs/{bucket_name}/generate_pruefbericht/{submission_id}.log",
    shell:
        """
        (
            IS_VALID=$(cat {input.validation_flag})
            if [[ "$IS_VALID" == "true" ]]; then
                pruefbericht_params=""
            else
                pruefbericht_params="--fail"
            fi
            grzctl pruefbericht --submission-dir {input.data} ${{pruefbericht_params}}
        ) > {log} 2>&1
        """


rule report_pruefbericht_to_bfarm:
    """
    Report the Prüfbericht to BfArM.
    """
    input:
        pruefbericht="results/{bucket_name}/pruefbericht/{submission_id}",
        db_config="config/db.config.yaml",
    output:
        answer=temp("results/{bucket_name}/pruefbericht_answer/{submission_id}"),
    log:
        "logs/{bucket_name}/report_pruefbericht_to_bfarm/{submission_id}.log",
    shell:
        """
        (
            (echo 'Use BfArM API and record response' > {output.answer}) || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} reported
        ) 2> {log}"""


rule perform_qc:
    """
    Perform QC on the submission using the QC nextflow pipeline.
    """
    input:
        data="results/{bucket_name}/decrypted/{submission_id}",
        db_config="config/db.config.yaml",
    output:
        qc_results=temp("results/{bucket_name}/qc/{submission_id}"),
    log:
        "logs/{bucket_name}/perform_qc/{submission_id}.log",
    # handover: "TODO: handover to QC pipeline"
    shell:
        """
        (
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} qcing
            (echo 'running fake qc...' > {output.qc_results}) || grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} qced
        ) > {log} 2>&1
        """


rule clean_submission_from_inbox_with_qc:
    input:
        ready_marker="results/{bucket_name}/qc/{submission_id}",
        db_config="config/db.config.yaml",
    output:
        clean_results=temp(
            "results/{bucket_name}/clean_submission_from_inbox/with_qc/{submission_id}"
        ),
    log:
        "logs/{bucket_name}/clean_submission_from_inbox/with_qc/{submission_id}.log",
    shell:
        """
        (
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} cleaning
            (grzctl clean --submission-id {wildcards.submission_id} --yes-i-really-mean-it && echo 'true' > {output.clean_results}) || (grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error && echo 'false' > {output.clean_results})
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} cleaned
        ) > {log} 2>&1
        """


rule clean_submission_from_inbox_without_qc:
    input:
        ready_marker="results/{bucket_name}/pruefbericht_answer/{submission_id}",
        db_config="config/db.config.yaml",
    output:
        clean_results=temp(
            "results/{bucket_name}/clean_submission_from_inbox/without_qc/{submission_id}"
        ),
    log:
        "logs/{bucket_name}/clean_submission_from_inbox/without_qc/{submission_id}.log",
    shell:
        """
        (
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} cleaning
            (grzctl clean --submission-id {wildcards.submission_id} --yes-i-really-mean-it && echo 'true' > {output.clean_results}) || (grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} error && echo 'false' > {output.clean_results})
            grzctl db --config-file {input.db_config} submission update {wildcards.submission_id} cleaned
        ) > {log} 2>&1
        """


rule update_taetigkeitsbericht:
    """
    Update the Taetigkeitsbericht with information from the submission DB.
    """
    input:
        db_config="config/db.config.yaml",
    output:
        taetigkeitsbericht=temp(
            "results/{bucket_name}/taetigkeitsbericht/{submission_id}.pdf"
        ),
    log:
        "logs/{bucket_name}/update_taetigkeitsbericht/{submission_id}.log",
    shell:
        """
        # (generate taetigkeitsbericht using submission DB via {input.db_config}) 2> {log}
        echo "TODO" > {output.taetigkeitsbericht} 2> {log}
        """


rule finalize_submission_with_qc:
    """
    Target rule for each submission.
    This rule does not really do anything, except explicitly state what needs to happen (which inputs are required)
    in order for a submission to be considered "completed".
    """
    input:
        archived="results/{bucket_name}/archived/{submission_id}",
        pruefbericht="results/{bucket_name}/pruefbericht/{submission_id}",
        pruefbericht_answer="results/{bucket_name}/pruefbericht_answer/{submission_id}",
        taetigkeitsbericht="results/{bucket_name}/taetigkeitsbericht/{submission_id}.pdf",
        clean_results="results/{bucket_name}/clean_submission_from_inbox/with_qc/{submission_id}",
    output:
        target="results/{bucket_name}/target/with_qc/{submission_id}",
    log:
        "logs/{bucket_name}/finalize_submission/with_qc/{submission_id}.log",
    shell:
        """
        (
            CLEANED=$(cat {input.clean_results})
            if [[ $"CLEANED" == "true" ]]; then
                echo "done" > {output.target}
            else
                echo "fail" > {output.target}
            fi
        ) > {log} 2>&1
        """


rule finalize_submission_without_qc:
    """
    Target rule for each submission.
    This rule does not really do anything, except explicitly state what needs to happen (which inputs are required)
    in order for a submission to be considered "completed".
    """
    input:
        archived="results/{bucket_name}/archived/{submission_id}",
        pruefbericht_answer="results/{bucket_name}/pruefbericht_answer/{submission_id}",
        taetigkeitsbericht="results/{bucket_name}/taetigkeitsbericht/{submission_id}.pdf",
        clean_results="results/{bucket_name}/clean_submission_from_inbox/without_qc/{submission_id}",
    output:
        target="results/{bucket_name}/target/without_qc/{submission_id}",
    log:
        "logs/{bucket_name}/finalize_submission/without_qc/{submission_id}.log",
    shell:
        """
        (
            CLEANED=$(cat {input.clean_results})
            if [[ "$CLEANED" == "true" ]]; then
                echo "Submission {wildcards.submission_id} successfully finalized without QC." > {output.target}
            else
                echo "Submission {wildcards.submission_id} failed to finalize without QC." > {output.target}
                exit 1
            fi
        ) > {log} 2>&1
        """
